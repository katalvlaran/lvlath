// Package lvlath is your in-memory playground for building, exploring,
// and analyzing graphs â€” from core primitives to advanced flow, TSP and
// time-series algorithms.
//
// ðŸš€ What is lvlath/graph?
//
//	A modern, thread-safe, zero-dependency library that brings together:
//		â€¢ Core primitives: create vertices & edges, mutate safely under locks
//		â€¢ Matrix views: adjacency & incidence matrices + converters
//		â€¢ Traversals: BFS, DFS
//		â€¢ Shortest paths: Dijkstra
//		â€¢ Minimum spanning trees: Prim, Kruskal
//		â€¢ Flow algorithms: Fordâ€“Fulkerson, Edmondsâ€“Karp, Dinic
//		â€¢ TSP solvers: Heldâ€“Karp (exact), Christofides (approx)
//		â€¢ Time-series: Dynamic Time Warping (DTW)
//
// âœ¨ Why choose lvlath?
//
//   - Beginner-friendly â€“ minimal API, clear, intuitive naming
//   - Rock-solid guarantees â€“ R/W locks, in-code docs & hooks
//   - Pure Go â€“ no cgo, no hidden deps
//   - Extensible â€“ add custom hooks (OnVisit, OnEnqueueâ€¦) for custom logic
//
// Under the hood, everything is organized under three subpackages:
//
//	algorithms/ â€” traversal (BFS/DFS), shortest path (Dijkstra) & MST (Prim/Kruskal)
//	converters/ â€”
//	core/       â€” fundamental Graph, Vertex, Edge types & thread-safe primitives
//	dtw/ â€”
//	flow/ â€”
//	gridgraph/ â€”
//	matrix/     â€” adjacency & incidence matrix representations + converters
//	tsp/ â€”
//
// Quick ASCII example:
//
//	    Aâ”€â”€â”€B
//	    â”‚   â”‚
//	    Câ”€â”€â”€D
//
//	represents a square with four vertices and four edges.
//
// Next up: GridGraph, external converters, probabilistic models and beyond.
// Dive into README.md for full examples, a feature matrix, and our roadmap
// to parallelism, flow algorithms and beyond.
//
//	go get github.com/katalvlaran/lvlath/graph
package lvlath
